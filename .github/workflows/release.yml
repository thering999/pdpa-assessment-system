name: Release and Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/pdpa-assessment-system

jobs:
  release:
    name: Create tag, changelog and publish image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tag
        id: ver
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_INPUT=${{ inputs.version }}
            if [[ $VERSION_INPUT != v* ]]; then
              TAG="v${VERSION_INPUT}"
              VERSION="$VERSION_INPUT"
            else
              TAG="$VERSION_INPUT"
              VERSION="${VERSION_INPUT#v}"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            # From pushed tag ref, e.g. refs/tags/v1.2.3
            REF_TAG="${GITHUB_REF#refs/tags/}"
            echo "tag=$REF_TAG" >> $GITHUB_OUTPUT
            echo "version=${REF_TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Create tag ref (when dispatched)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = core.getInput('tag', { required: false }) || '${{ steps.ver.outputs.tag }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
              core.info(`Tag ${tag} already exists, skipping creation.`);
            } catch (e) {
              const commit = (await github.rest.repos.getCommit({ owner, repo, ref: context.sha })).data.sha;
              await github.rest.git.createRef({ owner, repo, ref: `refs/tags/${tag}`, sha: commit });
              core.info(`Created tag ${tag} -> ${commit}`);
            }

      - name: Generate CHANGELOG for this release
        id: changelog
        shell: bash
        run: |
          set -e
          TAG='${{ steps.ver.outputs.tag }}'
          # Find previous tag (if any)
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || true)
          echo "Previous tag: $PREV_TAG"
          if [[ -n "$PREV_TAG" ]]; then
            RANGE="$PREV_TAG..$TAG"
            echo -e "# Changelog for $TAG\n\nChanges since $PREV_TAG:\n" > CHANGELOG.md
          else
            RANGE="$TAG"
            echo -e "# Changelog for $TAG\n\nInitial release.\n" > CHANGELOG.md
          fi
          git log --no-merges --pretty=format:'- %s (%h)' $RANGE >> CHANGELOG.md || true
          echo "changelog_path=CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=v${{ steps.ver.outputs.version }}
            type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.tag }}
          body_path: ${{ steps.changelog.outputs.changelog_path }}
          prerelease: ${{ inputs.prerelease || false }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
